{"version":3,"sources":["state/predictions/hooks.ts","views/Predictions/Leaderboard/components/Crumbs.tsx","views/Predictions/Leaderboard/components/Hero.tsx","views/Predictions/Leaderboard/components/AddressSearch.tsx","views/Predictions/Leaderboard/components/Results/styles.tsx","views/Predictions/Leaderboard/components/PositionLabel.tsx","views/Predictions/Leaderboard/components/PreviousBetsTable.tsx","views/Predictions/Leaderboard/components/MobileBetsTable.tsx","views/Predictions/Leaderboard/components/Results/DesktopBetsTable.tsx","views/Predictions/Leaderboard/components/WalletStatsModal.tsx","views/Predictions/Leaderboard/components/Results/ResultAvatar.tsx","views/Predictions/Leaderboard/components/Results/DesktopRow.tsx","views/Predictions/Leaderboard/components/Results/DesktopResults.tsx","views/Predictions/Leaderboard/components/Results/MobileRow.tsx","views/Predictions/Leaderboard/components/Results/MobileResults.tsx","views/Predictions/Leaderboard/components/Results/RankingCard.tsx","views/Predictions/Leaderboard/components/Results/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","views/Predictions/Leaderboard/components/Results/ConnectedWalletResult.tsx","components/Select/Select.tsx","views/Predictions/Leaderboard/components/Filters/index.tsx","views/Predictions/Leaderboard/index.tsx","../node_modules/lodash/times.js","../node_modules/lodash/_castFunction.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/orderBy.js","../node_modules/lodash/_baseOrderBy.js","../node_modules/lodash/_baseSortBy.js","../node_modules/lodash/_compareMultiple.js","../node_modules/lodash/_compareAscending.js","components/PageHeader/PageHeader.tsx"],"names":["useGetLeaderboardLoadingState","useSelector","state","predictions","leaderboard","loadingState","useGetAddressResult","account","addressResults","useGetOrFetchLeaderboardAddressResult","addressResult","dispatch","useAppDispatch","useEffect","address","isAddress","fetchAddressResult","Crumbs","t","useTranslation","mb","to","Hero","PageHeader","as","scale","color","ResultStatus","Row","children","props","alignItems","justifyContent","NetWinnings","amount","textPrefix","textColor","bnbBusdPrice","useBNBBusdPrice","value","multiplyPriceByAmount","Math","abs","flexDirection","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","fontSize","lineHeight","NetWinningsRow","StyledPositionLabel","styled","div","theme","bgColor","colors","Label","mediaQueries","lg","PositionLabel","position","isBull","BetPosition","BULL","icon","width","PreviousBetsTable","numberOfBets","useState","isFetching","setIsFetching","bets","setBets","orderedBets","orderBy","a","getBetHistory","user","toLowerCase","response","map","transformBetResponse","fetchBetHistory","textAlign","times","num","height","bet","isWinner","round","epoch","claimedNetBNB","id","MobileBetsTable","isOpen","setIsOpen","px","py","borderBottom","borderColor","style","cursor","onClick","textTransform","DesktopBetsTable","p","ExternalLink","LinkExternal","black","WalletStatsModal","onDismiss","onBeforeDismiss","useTheme","result","profileAvatar","useGetProfileAvatar","isLoading","LeaderboardLoadingState","LOADING","isDesktop","useMatchBreakpoints","minWidth","background","gradients","bubblegum","flex","mr","src","nft","images","md","username","href","getBscScanLink","truncateHash","variant","maxHeight","overflowY","gridTemplateColumns","gridGap","netBNB","winRate","totalBetsClaimed","totalBets","AvatarWrapper","Box","UsernameWrapper","ResultAvatar","useModal","onPresentWalletStatsModal","component","options","placement","Link","bold","external","DesktopRow","rank","DesktopResults","results","Container","index","StyledMobileRow","card","cardBorder","MobileRow","MobileResults","RotatedLaurelLeftIcon","LaurelLeftIcon","RotatedLaurelRightIcon","LaurelRightIcon","RankingCard","rankColor","getRankingColor","ribbon","variantColor","text","ribbonPosition","Results","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","first","second","third","rest","currentSkip","skip","hasMoreResults","endIcon","spin","filterNextPageLeaderboard","LEADERBOARD_RESULTS_PER_PAGE","ConnectedWalletResult","useWeb3React","accountResult","fetchProfileAvatar","isActive","DropDownHeader","shadows","inset","inputSecondary","input","DropDownListContainer","zIndices","dropdown","sm","DropDownContainer","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","onOptionChange","dropdownRef","useRef","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","handleClickOutside","document","addEventListener","removeEventListener","label","ref","option","selectedIndex","SubMenu","radii","AddressLink","Text","initialState","resultFound","NOT_VALID","AddressSearch","setState","prevState","getAddressResult","NOT_FOUND","FOUND","placeholder","subject","onChange","evt","newValue","target","zIndex","paddingRight","top","right","CircleLoader","SearchWrapper","FilterWrapper","Filters","orderByOptions","setLeaderboardFilter","Leaderboard","leaderboardLoadingState","filters","filterLeaderboard","INITIAL","PageLoader","Page","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","min","module","exports","n","iteratee","length","identity","toFinite","remainder","baseOrderBy","isArray","collection","iteratees","orders","guard","arrayMap","baseGet","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","key","object","other","array","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","Outer","Inner"],"mappings":"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","file":"static/js/8.f7dd67bc.chunk.js","sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\r\nimport { parseBigNumberObj } from './helpers'\r\nimport { fetchAddressResult } from '.'\r\n\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.intervalSeconds)\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetRounds()\r\n  return rounds[currentEpoch]\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetHasHistoryLoaded = () => {\r\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\r\n}\r\n\r\nexport const useGetCurrentHistoryPage = () => {\r\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetBufferSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.bufferSeconds)\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n/**\r\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\r\n */\r\nexport const useGetCurrentRoundLockTimestamp = () => {\r\n  const currentRound = useGetCurrentRound()\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n\r\n  if (!currentRound.lockTimestamp) {\r\n    return currentRound.startTimestamp + intervalSeconds\r\n  }\r\n\r\n  return currentRound.lockTimestamp\r\n}\r\n\r\n// Leaderboard\r\nexport const useGetLeaderboardLoadingState = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\r\n}\r\n\r\nexport const useGetLeaderboardResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.results)\r\n}\r\n\r\nexport const useGetLeaderboardFilters = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\r\n}\r\n\r\nexport const useGetLeaderboardSkip = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\r\n}\r\n\r\nexport const useGetLeaderboardHasMoreResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\r\n}\r\n\r\nexport const useGetAddressResult = (account: string) => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\r\n}\r\n\r\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\r\n  const addressResult = useGetAddressResult(account)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    const address = isAddress(account)\r\n\r\n    // If address result is null it means we already tried fetching the results and none came back\r\n    if (!addressResult && addressResult !== null && address) {\r\n      dispatch(fetchAddressResult(account))\r\n    }\r\n  }, [dispatch, account, addressResult])\r\n\r\n  return addressResult\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Box, Breadcrumbs, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst Crumbs = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box mb=\"24px\">\r\n      <Breadcrumbs>\r\n        <Link to=\"/\">{t('Home')}</Link>\r\n        <Link to=\"/prediction\">{t('Prediction')}</Link>\r\n        <Text>{t('Leaderboard')}</Text>\r\n      </Breadcrumbs>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Crumbs\r\n","import React from 'react'\r\nimport { Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PageHeader from 'components/PageHeader'\r\nimport Crumbs from './Crumbs'\r\n\r\nconst Hero = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <PageHeader>\r\n      <Crumbs />\r\n      <Heading as=\"h1\" scale=\"xxl\" color=\"dark\">\r\n        {t('Leaderboard')}\r\n      </Heading>\r\n    </PageHeader>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, Text, Input, useModal } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchAddressResult } from 'state/predictions'\r\nimport { useGetAddressResult } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\nimport WalletStatsModal from './WalletStatsModal'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst AddressSearch = () => {\r\n  const [state, setState] = useState(initialState)\r\n  const addressResult = useGetAddressResult(state.value)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const [onPresentWalletStatsModal] = useModal(\r\n    <WalletStatsModal account={state.value} onBeforeDismiss={() => setState(initialState)} />,\r\n  )\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onPresentWalletStatsModal()\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const getAddressResult = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        await dispatch(fetchAddressResult(value))\r\n      } finally {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      getAddressResult()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, dispatch, setState])\r\n\r\n  useEffect(() => {\r\n    // Undefined means we have not checked yet\r\n    if (addressResult !== undefined) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        resultFound: addressResult === null ? ResultStatus.NOT_FOUND : ResultStatus.FOUND,\r\n      }))\r\n    }\r\n  }, [addressResult, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressSearch\r\n","import React from 'react'\r\nimport { Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nexport const Row: React.FC<FlexProps> = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface NetWinningsProps extends FlexProps {\r\n  amount: number\r\n  textPrefix?: string\r\n  textColor?: string\r\n}\r\n\r\nexport const NetWinnings: React.FC<NetWinningsProps> = ({ amount, textPrefix = '', textColor = 'text', ...props }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const value = multiplyPriceByAmount(bnbBusdPrice, Math.abs(amount))\r\n\r\n  if (!amount) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\" {...props}>\r\n      <Text fontWeight=\"bold\" color={textColor}>\r\n        {`${textPrefix}${amount.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 6 })}`}\r\n      </Text>\r\n      <Text fontSize=\"12px\" color=\"black\" lineHeight={1}>\r\n        {`~$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const NetWinningsRow: React.FC<{ amount: number }> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row mb=\"4px\">\r\n      <Text fontSize=\"12px\" color=\"black\">\r\n        {t('Net Winnings (BNB)')}\r\n      </Text>\r\n      <NetWinnings amount={amount} textPrefix={amount > 0 ? '+' : ''} textColor={amount > 0 ? 'success' : 'failure'} />\r\n    </Row>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface PositionLabelProps {\r\n  position: BetPosition\r\n}\r\n\r\nconst StyledPositionLabel = styled.div<{ bgColor: string }>`\r\n  align-items: center;\r\n  background-color: ${({ theme, bgColor }) => theme.colors[bgColor]};\r\n  border-radius: 4px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  height: 32px;\r\n  min-width: 16px;\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: #fff;\r\n  display: none;\r\n  text-transform: uppercase;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: block;\r\n    margin-left: 4px;\r\n  }\r\n`\r\n\r\nconst PositionLabel: React.FC<PositionLabelProps> = ({ position }) => {\r\n  const { t } = useTranslation()\r\n  const isBull = position === BetPosition.BULL\r\n  const bgColor = isBull ? 'success' : 'failure'\r\n  const icon = isBull ? <ArrowUpIcon width=\"24px\" color=\"white\" /> : <ArrowDownIcon width=\"24px\" color=\"white\" />\r\n\r\n  return (\r\n    <StyledPositionLabel bgColor={bgColor}>\r\n      {icon}\r\n      <Label>{isBull ? t('Up') : t('Down')}</Label>\r\n    </StyledPositionLabel>\r\n  )\r\n}\r\n\r\nexport default PositionLabel\r\n","import React, { useEffect, useState } from 'react'\r\nimport times from 'lodash/times'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\r\nimport { Bet } from 'state/types'\r\nimport PositionLabel from './PositionLabel'\r\nimport { NetWinnings } from './Results/styles'\r\n\r\ninterface PreviousBetsTableProps {\r\n  numberOfBets?: number\r\n  account: string\r\n}\r\n\r\nconst PreviousBetsTable: React.FC<PreviousBetsTableProps> = ({ numberOfBets = 5, account }) => {\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const [bets, setBets] = useState<Bet[]>([])\r\n  const { t } = useTranslation()\r\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc'])\r\n\r\n  useEffect(() => {\r\n    const fetchBetHistory = async () => {\r\n      setIsFetching(true)\r\n      try {\r\n        const response = await getBetHistory(\r\n          {\r\n            user: account.toLowerCase(),\r\n          },\r\n          numberOfBets,\r\n        )\r\n\r\n        setBets(response.map(transformBetResponse))\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    fetchBetHistory()\r\n  }, [account, numberOfBets, setIsFetching, setBets])\r\n\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <Th>{t('Round')}</Th>\r\n          <Th>{t('Direction')}</Th>\r\n          <Th textAlign=\"right\">{t('Winnings (BNB)')}</Th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {isFetching\r\n          ? times(numberOfBets).map((num) => (\r\n              <tr key={num}>\r\n                <Td>\r\n                  <Skeleton width=\"80px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton width=\"60px\" height=\"32px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton width=\"80px\" />\r\n                </Td>\r\n              </tr>\r\n            ))\r\n          : orderedBets.map((bet) => {\r\n              const isWinner = bet.position === bet.round.position\r\n\r\n              return (\r\n                <tr key={bet.id}>\r\n                  <Td textAlign=\"center\" fontWeight=\"bold\">\r\n                    {bet.round.epoch.toLocaleString()}\r\n                  </Td>\r\n                  <Td textAlign=\"center\">\r\n                    <PositionLabel position={bet.position} />\r\n                  </Td>\r\n                  <Td textAlign=\"right\">\r\n                    <NetWinnings\r\n                      amount={isWinner ? bet.claimedNetBNB : bet.amount}\r\n                      textPrefix={isWinner ? '+' : '-'}\r\n                      textColor={isWinner ? 'success' : 'failure'}\r\n                    />\r\n                  </Td>\r\n                </tr>\r\n              )\r\n            })}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default PreviousBetsTable\r\n","import React, { useState } from 'react'\r\nimport { Flex, Text, ChevronUpIcon, ChevronDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PreviousBetsTable from './PreviousBetsTable'\r\n\r\ninterface MobileBetsTableProps {\r\n  account: string\r\n}\r\n\r\nconst MobileBetsTable: React.FC<MobileBetsTableProps> = ({ account }) => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const handleToggle = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        px=\"24px\"\r\n        py=\"32px\"\r\n        borderBottom=\"1px solid\"\r\n        borderColor=\"cardBorder\"\r\n        style={{ cursor: 'pointer' }}\r\n        onClick={handleToggle}\r\n      >\r\n        <Text as=\"h5\" color=\"dark\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n          {t('Last %num% Bets', { num: 5 })}\r\n        </Text>\r\n        {isOpen ? <ChevronDownIcon /> : <ChevronUpIcon />}\r\n      </Flex>\r\n      {isOpen && <PreviousBetsTable account={account} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MobileBetsTable\r\n","import React from 'react'\r\nimport { Box, Card, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PreviousBetsTable from '../PreviousBetsTable'\r\n\r\ninterface DesktopBetsTableProps {\r\n  account: string\r\n}\r\n\r\nconst DesktopBetsTable: React.FC<DesktopBetsTableProps> = ({ account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box p=\"24px\">\r\n      <Text as=\"h5\" color=\"dark\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\" mb=\"16px\">\r\n        {t('Last %num% Bets', { num: 5 })}\r\n      </Text>\r\n      <Card>\r\n        <PreviousBetsTable account={account} />\r\n      </Card>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default DesktopBetsTable\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  CloseIcon,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  IconButton,\r\n  InjectedModalProps,\r\n  LinkExternal,\r\n  ModalContainer,\r\n  ModalHeader,\r\n  ProfileAvatar,\r\n  useMatchBreakpoints,\r\n  Skeleton,\r\n  Heading,\r\n} from '@pancakeswap/uikit'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { LeaderboardLoadingState } from 'state/types'\r\nimport { useGetOrFetchLeaderboardAddressResult, useGetLeaderboardLoadingState } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NetWinnings } from './Results/styles'\r\nimport MobileBetsTable from './MobileBetsTable'\r\nimport DesktopBetsTable from './Results/DesktopBetsTable'\r\n\r\ninterface WalletStatsModalProps extends InjectedModalProps {\r\n  account: string\r\n  onBeforeDismiss?: () => void\r\n}\r\n\r\nconst ExternalLink = styled(LinkExternal)`\r\n  color: ${({ theme }) => theme.colors.black};\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.black};\r\n  }\r\n`\r\n\r\nconst WalletStatsModal: React.FC<WalletStatsModalProps> = ({ account, onDismiss, onBeforeDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const result = useGetOrFetchLeaderboardAddressResult(account)\r\n  const profileAvatar = useGetProfileAvatar(account)\r\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\r\n  const isLoading = leaderboardLoadingState === LeaderboardLoadingState.LOADING\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  const handleDismiss = () => {\r\n    if (onBeforeDismiss) {\r\n      onBeforeDismiss()\r\n    }\r\n\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer minWidth=\"320px\">\r\n      <ModalHeader background={theme.colors.gradients.bubblegum}>\r\n        <Flex alignItems=\"center\" style={{ flex: 1 }}>\r\n          <Box width={['64px', null, null, null, null, null, '96px']} mr=\"16px\">\r\n            <ProfileAvatar src={`/images/nfts/${profileAvatar.nft?.images?.md}`} height={96} width={96} />\r\n          </Box>\r\n          <Box>\r\n            {profileAvatar.username && (\r\n              <Heading scale=\"lg\" mb=\"8px\">\r\n                {profileAvatar.username}\r\n              </Heading>\r\n            )}\r\n            <ExternalLink href={getBscScanLink(account, 'address')}>{truncateHash(account)}</ExternalLink>\r\n          </Box>\r\n        </Flex>\r\n        <IconButton variant=\"text\" onClick={handleDismiss} aria-label=\"Close the dialog\">\r\n          <CloseIcon color=\"black\" width=\"24px\" />\r\n        </IconButton>\r\n      </ModalHeader>\r\n      {result === null ? (\r\n        <Text p=\"32px\" textAlign=\"center\" fontWeight=\"bold\">\r\n          {t('No results found.')}\r\n        </Text>\r\n      ) : (\r\n        <Box maxHeight={['500px', null, null, null, null, null, 'none']} overflowY=\"auto\">\r\n          <Grid\r\n            gridTemplateColumns={['1fr', null, null, null, null, null, 'repeat(4, 1fr)']}\r\n            gridGap=\"16px\"\r\n            p=\"24px\"\r\n            borderBottom=\"1px solid\"\r\n            borderColor=\"cardBorder\"\r\n          >\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"black\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Net Winnings')}\r\n              </Text>\r\n              {isLoading ? (\r\n                <Skeleton />\r\n              ) : (\r\n                <NetWinnings\r\n                  amount={result?.netBNB}\r\n                  textPrefix={result?.netBNB > 0 ? '+' : ''}\r\n                  textColor={result?.netBNB > 0 ? 'success' : 'failure'}\r\n                  alignItems=\"flex-end\"\r\n                />\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"black\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Win Rate')}\r\n              </Text>\r\n              {isLoading ? (\r\n                <Skeleton />\r\n              ) : (\r\n                <Text fontWeight=\"bold\">{`${result?.winRate?.toLocaleString(undefined, {\r\n                  minimumFractionDigits: 0,\r\n                  maximumFractionDigits: 2,\r\n                })}%`}</Text>\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"black\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Rounds Won')}\r\n              </Text>\r\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBetsClaimed?.toLocaleString()}</Text>}\r\n            </Box>\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"black\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Rounds Played')}\r\n              </Text>\r\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBets?.toLocaleString()}</Text>}\r\n            </Box>\r\n          </Grid>\r\n          {isDesktop ? <DesktopBetsTable account={account} /> : <MobileBetsTable account={account} />}\r\n        </Box>\r\n      )}\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default WalletStatsModal\r\n","import React from 'react'\r\nimport { Box, Flex, FlexProps, Link, ProfileAvatar, SubMenu, SubMenuItem, useModal, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport { PredictionUser } from 'state/types'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WalletStatsModal from '../WalletStatsModal'\r\n\r\ninterface ResultAvatarProps extends FlexProps {\r\n  user: PredictionUser\r\n}\r\n\r\nconst AvatarWrapper = styled(Box)`\r\n  order: 2;\r\n  margin-left: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n    margin-left: 0;\r\n    margin-right: 8px;\r\n  }\r\n`\r\n\r\nconst UsernameWrapper = styled(Box)`\r\n  order: 1;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n  }\r\n`\r\n\r\nconst ResultAvatar: React.FC<ResultAvatarProps> = ({ user, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const profileAvatar = useGetProfileAvatar(user.id)\r\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\r\n\r\n  return (\r\n    <SubMenu\r\n      component={\r\n        <Flex alignItems=\"center\" {...props}>\r\n          <UsernameWrapper>\r\n            <Text color=\"darkgreen\" fontWeight=\"bold\">\r\n              {profileAvatar.username || truncateHash(user.id)}\r\n            </Text>{' '}\r\n          </UsernameWrapper>\r\n          <AvatarWrapper\r\n            width={['32px', null, null, null, null, '40px']}\r\n            height={['32px', null, null, null, null, '40px']}\r\n          >\r\n            <ProfileAvatar src={`/images/nfts/${profileAvatar.nft?.images?.md}`} height={40} width={40} />\r\n          </AvatarWrapper>\r\n        </Flex>\r\n      }\r\n      options={{ placement: 'bottom-start' }}\r\n    >\r\n      <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\r\n      <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"black\" external>\r\n        {t('View on BscScan')}\r\n      </SubMenuItem>\r\n    </SubMenu>\r\n  )\r\n}\r\n\r\nexport default ResultAvatar\r\n","import React from 'react'\r\nimport { Td, Text } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport ResultAvatar from './ResultAvatar'\r\nimport { NetWinnings } from './styles'\r\n\r\ninterface DesktopRowProps {\r\n  rank?: number\r\n  user: PredictionUser\r\n}\r\n\r\nconst DesktopRow: React.FC<DesktopRowProps> = ({ rank, user, ...props }) => (\r\n  <tr {...props}>\r\n    {rank ? (\r\n      <Td>\r\n        <Text textAlign=\"center\" fontWeight=\"bold\" color=\"dark\">{`#${rank}`}</Text>\r\n      </Td>\r\n    ) : (\r\n      <Td />\r\n    )}\r\n    <Td>\r\n      <ResultAvatar user={user} />\r\n    </Td>\r\n    <Td>\r\n      <NetWinnings\r\n        amount={user.netBNB}\r\n        textPrefix={user.netBNB > 0 ? '+' : ''}\r\n        textColor={user.netBNB > 0 ? 'success' : 'failure'}\r\n      />\r\n    </Td>\r\n    <Td textAlign=\"center\">\r\n      {`${user.winRate.toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      })}%`}\r\n    </Td>\r\n    <Td textAlign=\"center\">\r\n      <strong>{user.totalBetsClaimed.toLocaleString()}</strong>\r\n    </Td>\r\n    <Td textAlign=\"center\">{user.totalBets.toLocaleString()}</Td>\r\n  </tr>\r\n)\r\n\r\nexport default DesktopRow\r\n","import React from 'react'\r\nimport { Card, Table, Th } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport Container from 'components/Layout/Container'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport DesktopRow from './DesktopRow'\r\n\r\ninterface DesktopResultsProps {\r\n  results: PredictionUser[]\r\n}\r\n\r\nconst DesktopResults: React.FC<DesktopResultsProps> = ({ results }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Container mb=\"24px\">\r\n      <Card>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <Th width=\"60px\">&nbsp;</Th>\r\n              <Th textAlign=\"left\">{t('User')}</Th>\r\n              <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\r\n              <Th>{t('Win Rate')}</Th>\r\n              <Th>{t('Rounds Won')}</Th>\r\n              <Th>{t('Rounds Played')}</Th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {results.map((result, index) => (\r\n              <DesktopRow key={result.id} rank={index + 4} user={result} />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default DesktopResults\r\n","import React from 'react'\r\nimport { Box, Text } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NetWinningsRow, Row } from './styles'\r\nimport ResultAvatar from './ResultAvatar'\r\n\r\ninterface MobileRowProps {\r\n  rank?: number\r\n  user: PredictionUser\r\n}\r\n\r\nconst StyledMobileRow = styled(Box)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n\r\n  &:first-child {\r\n    border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  }\r\n`\r\n\r\nconst MobileRow: React.FC<MobileRowProps> = ({ rank, user }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledMobileRow p=\"16px\">\r\n      <Row mb=\"16px\">\r\n        {rank ? <Text fontWeight=\"bold\" color=\"dark\">{`#${rank}`}</Text> : <div />}\r\n        <ResultAvatar user={user} />\r\n      </Row>\r\n      <Row mb=\"4px\">\r\n        <Text fontSize=\"12px\" color=\"black\">\r\n          {t('Win Rate')}\r\n        </Text>\r\n        <Text fontWeight=\"bold\">\r\n          {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\r\n        </Text>\r\n      </Row>\r\n      <NetWinningsRow amount={user.netBNB} />\r\n      <Row>\r\n        <Text fontSize=\"12px\" color=\"black\">\r\n          {t('Rounds Won')}\r\n        </Text>\r\n        <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\r\n      </Row>\r\n    </StyledMobileRow>\r\n  )\r\n}\r\n\r\nexport default MobileRow\r\n","import React from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport MobileRow from './MobileRow'\r\n\r\ninterface MobileResultsProps {\r\n  results: PredictionUser[]\r\n}\r\n\r\nconst MobileResults: React.FC<MobileResultsProps> = ({ results }) => {\r\n  return (\r\n    <Box mb=\"24px\">\r\n      {results.map((result, index) => (\r\n        <MobileRow key={result.id} rank={index + 4} user={result} />\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MobileResults\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardBody,\r\n  CardRibbon,\r\n  Flex,\r\n  ProfileAvatar,\r\n  LaurelLeftIcon,\r\n  LaurelRightIcon,\r\n  Link,\r\n  Text,\r\n  SubMenu,\r\n  SubMenuItem,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WalletStatsModal from '../WalletStatsModal'\r\nimport { NetWinningsRow, Row } from './styles'\r\n\r\ninterface RankingCardProps {\r\n  rank: 1 | 2 | 3\r\n  user: PredictionUser\r\n}\r\n\r\nconst RotatedLaurelLeftIcon = styled(LaurelLeftIcon)`\r\n  transform: rotate(30deg);\r\n`\r\n\r\nconst RotatedLaurelRightIcon = styled(LaurelRightIcon)`\r\n  transform: rotate(-30deg);\r\n`\r\n\r\nconst getRankingColor = (rank: number) => {\r\n  if (rank === 3) {\r\n    return 'bronze'\r\n  }\r\n\r\n  if (rank === 2) {\r\n    return 'silver'\r\n  }\r\n\r\n  return 'gold'\r\n}\r\n\r\nconst RankingCard: React.FC<RankingCardProps> = ({ rank, user }) => {\r\n  const { t } = useTranslation()\r\n  const rankColor = getRankingColor(rank)\r\n  const profileAvatar = useGetProfileAvatar(user.id)\r\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\r\n\r\n  return (\r\n    <Card ribbon={<CardRibbon variantColor={rankColor} text={`#${rank}`} ribbonPosition=\"left\" />}>\r\n      <CardBody p=\"24px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" mb=\"24px\">\r\n          <SubMenu\r\n            component={\r\n              <>\r\n                <Flex mb=\"4px\">\r\n                  <RotatedLaurelLeftIcon color={rankColor} width=\"32px\" />\r\n                  <Box width={['40px', null, null, '64px']} height={['40px', null, null, '64px']}>\r\n                    <ProfileAvatar src={`/images/nfts/${profileAvatar.nft?.images?.md}`} height={64} width={64} />\r\n                  </Box>\r\n                  <RotatedLaurelRightIcon color={rankColor} width=\"32px\" />\r\n                </Flex>\r\n                <Text color=\"darkgreen\" fontWeight=\"bold\" textAlign=\"center\">\r\n                  {profileAvatar.username || truncateHash(user.id)}\r\n                </Text>\r\n              </>\r\n            }\r\n            options={{ placement: 'bottom' }}\r\n          >\r\n            <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\r\n            <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"black\" external>\r\n              {t('View on BscScan')}\r\n            </SubMenuItem>\r\n          </SubMenu>\r\n        </Flex>\r\n        <Row mb=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"black\">\r\n            {t('Win Rate')}\r\n          </Text>\r\n          <Text fontWeight=\"bold\">\r\n            {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\r\n          </Text>\r\n        </Row>\r\n        <NetWinningsRow amount={user.netBNB} />\r\n        <Row>\r\n          <Text fontSize=\"12px\" color=\"black\">\r\n            {t('Rounds Won')}\r\n          </Text>\r\n          <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default RankingCard\r\n","import React from 'react'\r\nimport { Box, Button, Grid, Flex, useMatchBreakpoints, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetLeaderboardHasMoreResults,\r\n  useGetLeaderboardLoadingState,\r\n  useGetLeaderboardResults,\r\n  useGetLeaderboardSkip,\r\n} from 'state/predictions/hooks'\r\nimport { LeaderboardLoadingState } from 'state/types'\r\nimport { filterNextPageLeaderboard } from 'state/predictions'\r\nimport { LEADERBOARD_RESULTS_PER_PAGE } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport DesktopResults from './DesktopResults'\r\nimport MobileResults from './MobileResults'\r\nimport RankingCard from './RankingCard'\r\n\r\nconst Results = () => {\r\n  const { isDesktop } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n  const [first, second, third, ...rest] = useGetLeaderboardResults()\r\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\r\n  const isLoading = leaderboardLoadingState === LeaderboardLoadingState.LOADING\r\n  const currentSkip = useGetLeaderboardSkip()\r\n  const hasMoreResults = useGetLeaderboardHasMoreResults()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleClick = () => {\r\n    dispatch(filterNextPageLeaderboard(currentSkip + LEADERBOARD_RESULTS_PER_PAGE))\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Container mb=\"16px\">\r\n        <Grid\r\n          gridGap={['16px', null, null, null, null, '24px']}\r\n          gridTemplateColumns={['1fr', null, null, null, null, 'repeat(3, 1fr)']}\r\n        >\r\n          <RankingCard rank={1} user={first} />\r\n          <RankingCard rank={2} user={second} />\r\n          <RankingCard rank={3} user={third} />\r\n        </Grid>\r\n      </Container>\r\n      {isDesktop ? <DesktopResults results={rest} /> : <MobileResults results={rest} />}\r\n      <Flex mb=\"40px\" justifyContent=\"center\">\r\n        {hasMoreResults && (\r\n          <Button\r\n            variant=\"secondary\"\r\n            isLoading={isLoading}\r\n            endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n            onClick={handleClick}\r\n          >\r\n            {isLoading ? t('Loading...') : t('View More')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React, { useEffect } from 'react'\r\nimport { Card, Heading, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Container from 'components/Layout/Container'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchProfileAvatar } from 'state/profile'\r\nimport { fetchAddressResult } from 'state/predictions'\r\nimport { useGetOrFetchLeaderboardAddressResult } from 'state/predictions/hooks'\r\nimport DesktopRow from './DesktopRow'\r\nimport MobileRow from './MobileRow'\r\n\r\nconst ConnectedWalletResult = () => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const accountResult = useGetOrFetchLeaderboardAddressResult(account)\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchProfileAvatar(account))\r\n      dispatch(fetchAddressResult(account))\r\n    }\r\n  }, [account, dispatch])\r\n\r\n  if (!account || !accountResult) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container mb=\"48px\">\r\n      <Heading as=\"h2\" scale=\"md\" color=\"dark\" mb=\"16px\">\r\n        {t('My Rankings')}\r\n      </Heading>\r\n      {isDesktop ? (\r\n        <Card isActive>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th width=\"60px\">&nbsp;</Th>\r\n                <Th textAlign=\"left\">&nbsp;</Th>\r\n                <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\r\n                <Th textAlign=\"center\">{t('Win Rate')}</Th>\r\n                <Th>{t('Rounds Won')}</Th>\r\n                <Th>{t('Rounds Played')}</Th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <DesktopRow user={accountResult} />\r\n            </tbody>\r\n          </Table>\r\n        </Card>\r\n      ) : (\r\n        <Card isActive>\r\n          <MobileRow user={accountResult} />\r\n        </Card>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ConnectedWalletResult\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onOptionChange, ...props }) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(0)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"black\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLeaderboardFilter } from 'state/predictions'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Container from 'components/Layout/Container'\r\nimport AddressSearch from '../AddressSearch'\r\n\r\nconst SearchWrapper = styled(Box)`\r\n  margin-bottom: 8px;\r\n  order: 1;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 0;\r\n    order: 2;\r\n    width: 320px;\r\n  }\r\n`\r\nconst FilterWrapper = styled(Box)`\r\n  order: 2;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst Filters = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const orderByOptions = [\r\n    { label: t('Net Winnings'), value: 'netBNB' },\r\n    { label: t('Total BNB'), value: 'totalBNB' },\r\n    { label: t('Rounds Played'), value: 'totalBets' },\r\n    { label: t('Win Rate'), value: 'winRate' },\r\n  ]\r\n\r\n  const handleOrderBy = (option: OptionProps) => {\r\n    dispatch(setLeaderboardFilter({ orderBy: option.value }))\r\n  }\r\n\r\n  return (\r\n    <Container py=\"32px\">\r\n      <Text textTransform=\"uppercase\" fontSize=\"12px\" color=\"black\" fontWeight=\"bold\" mb=\"4px\">\r\n        {t('Rank By')}\r\n      </Text>\r\n      <Flex\r\n        flexDirection={['column', null, null, null, null, 'row']}\r\n        alignItems={['start', null, null, null, null, 'center']}\r\n        justifyContent={['start', null, null, null, null, 'space-between']}\r\n      >\r\n        <FilterWrapper>\r\n          <Select options={orderByOptions} onOptionChange={handleOrderBy} />\r\n        </FilterWrapper>\r\n        <SearchWrapper>\r\n          <AddressSearch />\r\n        </SearchWrapper>\r\n      </Flex>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","import React, { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetLeaderboardFilters, useGetLeaderboardLoadingState } from 'state/predictions/hooks'\r\nimport { LeaderboardLoadingState } from 'state/types'\r\nimport { filterLeaderboard } from 'state/predictions'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { PageMeta } from 'components/Layout/Page'\r\nimport Hero from './components/Hero'\r\nimport Results from './components/Results'\r\nimport ConnectedWalletResult from './components/Results/ConnectedWalletResult'\r\nimport Filters from './components/Filters'\r\n\r\nconst Leaderboard = () => {\r\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\r\n  const filters = useGetLeaderboardFilters()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(filterLeaderboard({ filters }))\r\n  }, [account, filters, dispatch])\r\n\r\n  if (leaderboardLoadingState === LeaderboardLoadingState.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageMeta />\r\n      <Hero />\r\n      <Filters />\r\n      <ConnectedWalletResult />\r\n      <Results />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Leaderboard\r\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n"],"sourceRoot":""}